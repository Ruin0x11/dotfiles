#!/usr/bin/env lua

local usage = [[
Lua extended tag file generator, vs 0.1
usage: ltags [options]  <scripts>
    -nv  no variables
    -nr  no local require variables (implied by -nv)
    -e etags output
    -v verbose
]]

local TAG_HEADER = [[
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	steve.j.donovan@gmail.com
!_TAG_PROGRAM_NAME	ltags	//
!_TAG_PROGRAM_URL	http://github.com/stevedonovan/ltags	/official site/
!_TAG_PROGRAM_VERSION	0.1	//
]]

local entries, append = {}, table.insert

local function process_file (file, opts)
    local tag_vars = not opts.nv
    local tag_require = not opts.nr
    local skip, end_block, mod_name
    local pos = 0
    for line in io.lines(file) do
        -- skipping commentary --
        local comment = line:match '^%s*%-%-(.+)'
        skip = comment ~= nil
        if skip then
            if end_block then -- inside block comment
                if line:match (end_block) then
                    skip = false
                    end_block = nil
                end
            else
                local block = comment:match '%[(=*)%['
                if block then -- e.g. [=[, so hunt for ]=]
                    end_block = block:gsub('%[',']')
                else -- plain line comment
                    skip = false
                end
            end
        else
            local local_var, is_var
            local fname,arg = line:match '^%s*#def[c]?func%s+([^ ]+)'
            if not fname then
               fname,arg = line:match '^%s*%*([^ ]+)'
            end
            if not fname then
                local mmod = line:match '^%s*module%s*(.+)'
                if mmod then
                    mod_name = mmod:match '^%(*[\'"](.-)[\'"]'
                    if not mod_name then
                        mod_name = file:match '([^%.\\/]+)%.hsp'
                    end
                end
                -- look for file-scope locals (we assume that everyone uses indentation)
                local_var = line:match '^%s*#define%s+global%s+([a-zA-Z0-9_]+)'
                if local_var and tag_vars then
                   append(entries, {file=file, line=line, pos=pos, is_var=true, file_scope=true, name=local_var})
                end

                local_var = line:match '^%s*#define%s+global%s+ctype%s+([a-zA-Z0-9_]+)'
                if local_var and tag_vars then
                   append(entries, {file=file, line=line, pos=pos, is_var=true, file_scope=true, name=local_var})
                end

                local_var = line:match '^%s*#enum%s+global%s+([a-zA-Z0-9_]+)'
                if local_var and tag_vars then
                   append(entries, {file=file, line=line, pos=pos, is_var=true, file_scope=true, name=local_var})
                end

                local_var = line:match '^%s*[s]?dim%s+([a-zA-Z0-9_]+)'
                if local_var and tag_vars then
                   append(entries, {file=file, line=line, pos=pos, is_var=true, file_scope=true, name=local_var})
                end
            else -- Houston, we have a Function
                local e = {file = file, line = line}
                e.file_scope = maybe_local == 'local'
                local tbl, sep, name = fname:match '([^.:]+)([.:])(.+)'
                if not tbl then
                    name = fname
                    e.tbl = mod_name
                else
                    e.klass = sep == ':' or arg:match 'self%s*[,%)]'
                    e.tbl = tbl
                end
                e.name = name
                e.pos = pos
                append(entries,e)
                append(entries,{file=file, line=line, pos=pos, name=fname})
            end
        end

        pos = pos + string.len(line)
    end
end

local function main (files, opts)
    for _,f in ipairs(files) do
        process_file(f, opts)
    end
    table.sort(entries,function(e1,e2) return e1.name < e2.name end)
    local out = io.open("TAGS","w")

    local etags = opts.e
    if etags then
       local result = {}
       for _,e in ipairs(entries) do
          result[e.file] = result[e.file] or ""
          result[e.file] = result[e.file] .. ('%s%s%s,%d\n'):format(e.line,e.name,e.line,e.pos)
       end

       for file, v in pairs(result) do
          out:write(("\n%s,%s\n%s"):format(file, string.len(v), v))
       end
    else
       out:write(TAG_HEADER)
       for _,e in ipairs(entries) do
          local fields = e.is_var and 'v' or 'f '
          if e.file_scope then
             fields = fields..'\tfile:'
          elseif e.tbl then
             fields = 'm\t'..(e.klass and 'class' or 'struct')..':'..e.tbl
          end
          out:write(('%s\t%s\t/^%s$/;"\t%s\n'):format(e.name,e.file,e.line,fields))
       end
    end
    out:close()
end

local function glob (args)
   local res = {}
   for _,a in ipairs(args) do
      if a:match '[%*%?]' then -- no shell globbing, it's Windows :(
         local f = io.popen('dir /b '..a)
         local path = a:match [[(.-\)[^\]+$]] or ''
         for line in f:lines() do
            append(res,path..line)
         end
         f:close()
      else
         append(res,a)
      end
   end
   return res
end

local function quit (msg,...)
   if msg then io.stderr:write('ltags: ',msg:format(...),'\n') end
   print()
   print(usage)
   os.exit(1)
end

local function parse_args ()
   local args, opts = {}, {}
   local takes_value, known_flags = {},{}
   local i = 1
   for line in usage:gmatch '[^\n]+' do
      local flag,rest = line:match '^%s+%-(%S+)%s+(.*)'
      if flag then
         known_flags[flag] = true
         local valspec = rest:match '^%b<>'
         if valspec then
            takes_value[flag] = valspec:match '%.%.%.' and 'multiple' or 'single'
         end
      end
   end
   while i <= #arg do
      local a,val = arg[i]
      local flag = a:match '^%-(.+)'
      if flag then
         if not known_flags[flag] then quit('-'..flag..' unknown flag') end
         -- grab the next argument if we need a value
         if takes_value[flag] and not val then
            i = i + 1
            if i > #arg then quit('-'..flag..' needs a value') end
            if takes_value[flag] == 'multiple' then
               val = opts[flag] or {}
               append(val,arg[i])
            else
               if opts[flag] then quit('-'..flag..' takes only one value') end
               val = arg[i]
            end
         end
         opts[flag] = val or true
      else
         append(args,a)
      end
      i = i + 1
   end
   return glob(args), opts
end

local files, opts = parse_args()
if opts.v then
   for _,f in ipairs(files) do
      print(f)
   end
end
main (files, opts)
